(section
  (ref "ud_mr_sd-math")
  (title "sd-math")

  (subsection
    (title "Synopsis")
    (para "Detects C math library support and required compiler and linker flags."))

  (subsection
    (title "Description")
(para "This module performs compile-time checks against all functions in the
  standard C math library. It writes a header file with one preprocessor constant
  for each function that is implemented. The module also determines the linker
  flags required to use the standard math library.")

(para "Example output:")

(para-verbatim example
"#ifndef _SD_MATH_H
#define _SD_MATH_H

#define SD_HAVE_MATH_ACOS 1
#define SD_HAVE_MATH_ACOSF 1
#define SD_HAVE_MATH_ACOSH 1
#define SD_HAVE_MATH_ACOSHF 1
#define SD_HAVE_MATH_ASIN 1
#define SD_HAVE_MATH_ASINF 1
#define SD_HAVE_MATH_ASINH 1
#define SD_HAVE_MATH_ASINHF 1
#define SD_HAVE_MATH_ATAN 1
#define SD_HAVE_MATH_ATAN2 1
#define SD_HAVE_MATH_ATAN2F 1
#define SD_HAVE_MATH_ATANF 1
#define SD_HAVE_MATH_ATANH 1
#define SD_HAVE_MATH_ATANHF 1
#define SD_HAVE_MATH_CBRT 1
#define SD_HAVE_MATH_CBRTF 1
#define SD_HAVE_MATH_CEIL 1
#define SD_HAVE_MATH_CEILF 1
#define SD_HAVE_MATH_CEILL 1
#define SD_HAVE_MATH_COPYSIGN 1
#define SD_HAVE_MATH_COPYSIGNF 1
#define SD_HAVE_MATH_COPYSIGNL 1
#define SD_HAVE_MATH_COS 1
#define SD_HAVE_MATH_COSF 1
#define SD_HAVE_MATH_COSH 1
#define SD_HAVE_MATH_COSHF 1
#define SD_HAVE_MATH_ERF 1
#define SD_HAVE_MATH_ERFC 1
#define SD_HAVE_MATH_ERFCF 1
#define SD_HAVE_MATH_ERFF 1
#define SD_HAVE_MATH_EXP 1
#define SD_HAVE_MATH_EXP2 1
#define SD_HAVE_MATH_EXP2F 1
#define SD_HAVE_MATH_EXPF 1
#define SD_HAVE_MATH_EXPM1 1
#define SD_HAVE_MATH_EXPM1F 1
#define SD_HAVE_MATH_FABS 1
#define SD_HAVE_MATH_FABSF 1
#define SD_HAVE_MATH_FABSL 1
#define SD_HAVE_MATH_FDIM 1
#define SD_HAVE_MATH_FDIMF 1
#define SD_HAVE_MATH_FDIML 1
#define SD_HAVE_MATH_FLOOR 1
#define SD_HAVE_MATH_FLOORF 1
#define SD_HAVE_MATH_FLOORL 1
#define SD_HAVE_MATH_FMA 1
#define SD_HAVE_MATH_FMAF 1
#define SD_HAVE_MATH_FMAL 1
#define SD_HAVE_MATH_FMAX 1
#define SD_HAVE_MATH_FMAXF 1
#define SD_HAVE_MATH_FMAXL 1
#define SD_HAVE_MATH_FMIN 1
#define SD_HAVE_MATH_FMINF 1
#define SD_HAVE_MATH_FMINL 1
#define SD_HAVE_MATH_FMOD 1
#define SD_HAVE_MATH_FMODF 1
#define SD_HAVE_MATH_FPCLASSIFY 1
#define SD_HAVE_MATH_FREXP 1
#define SD_HAVE_MATH_FREXPF 1
#define SD_HAVE_MATH_FREXPL 1
#define SD_HAVE_MATH_HYPOT 1
#define SD_HAVE_MATH_HYPOTF 1
#define SD_HAVE_MATH_ILOGB 1
#define SD_HAVE_MATH_ILOGBF 1
#define SD_HAVE_MATH_ILOGBL 1
#define SD_HAVE_MATH_ISFINITE 1
#define SD_HAVE_MATH_ISGREATER 1
#define SD_HAVE_MATH_ISGREATEREQUAL 1
#define SD_HAVE_MATH_ISINF 1
#define SD_HAVE_MATH_ISLESS 1
#define SD_HAVE_MATH_ISLESSEQUAL 1
#define SD_HAVE_MATH_ISLESSGREATER 1
#define SD_HAVE_MATH_ISNAN 1
#define SD_HAVE_MATH_ISNANF 1
#define SD_HAVE_MATH_ISNORMAL 1
#define SD_HAVE_MATH_ISUNORDERED 1
#define SD_HAVE_MATH_J0 1
#define SD_HAVE_MATH_J0F 1
#define SD_HAVE_MATH_J1 1
#define SD_HAVE_MATH_J1F 1
#define SD_HAVE_MATH_JN 1
#define SD_HAVE_MATH_JNF 1
#define SD_HAVE_MATH_LDEXP 1
#define SD_HAVE_MATH_LDEXPF 1
#define SD_HAVE_MATH_LDEXPL 1
#define SD_HAVE_MATH_LGAMMA 1
#define SD_HAVE_MATH_LGAMMAF 1
#define SD_HAVE_MATH_LLRINT 1
#define SD_HAVE_MATH_LLRINTF 1
#define SD_HAVE_MATH_LLROUND 1
#define SD_HAVE_MATH_LLROUNDF 1
#define SD_HAVE_MATH_LLROUNDL 1
#define SD_HAVE_MATH_LOG 1
#define SD_HAVE_MATH_LOG10 1
#define SD_HAVE_MATH_LOG10F 1
#define SD_HAVE_MATH_LOG1P 1
#define SD_HAVE_MATH_LOG1PF 1
#define SD_HAVE_MATH_LOGF 1
#define SD_HAVE_MATH_LRINT 1
#define SD_HAVE_MATH_LRINTF 1
#define SD_HAVE_MATH_LROUND 1
#define SD_HAVE_MATH_LROUNDF 1
#define SD_HAVE_MATH_LROUNDL 1
#define SD_HAVE_MATH_MODF 1
#define SD_HAVE_MATH_NEARBYINT 1
#define SD_HAVE_MATH_NEARBYINTF 1
#define SD_HAVE_MATH_NEXTAFTER 1
#define SD_HAVE_MATH_NEXTAFTERF 1
#define SD_HAVE_MATH_NEXTAFTERL 1
#define SD_HAVE_MATH_NEXTTOWARD 1
#define SD_HAVE_MATH_NEXTTOWARDF 1
#define SD_HAVE_MATH_NEXTTOWARDL 1
#define SD_HAVE_MATH_POW 1
#define SD_HAVE_MATH_POWF 1
#define SD_HAVE_MATH_REMAINDER 1
#define SD_HAVE_MATH_REMAINDERF 1
#define SD_HAVE_MATH_REMQUO 1
#define SD_HAVE_MATH_REMQUOF 1
#define SD_HAVE_MATH_RINT 1
#define SD_HAVE_MATH_RINTF 1
#define SD_HAVE_MATH_ROUND 1
#define SD_HAVE_MATH_ROUNDF 1
#define SD_HAVE_MATH_ROUNDL 1
#define SD_HAVE_MATH_SCALBLN 1
#define SD_HAVE_MATH_SCALBLNF 1
#define SD_HAVE_MATH_SCALBLNL 1
#define SD_HAVE_MATH_SCALBN 1
#define SD_HAVE_MATH_SCALBNF 1
#define SD_HAVE_MATH_SCALBNL 1
#define SD_HAVE_MATH_SIGNBIT 1
#define SD_HAVE_MATH_SIN 1
#define SD_HAVE_MATH_SINF 1
#define SD_HAVE_MATH_SINH 1
#define SD_HAVE_MATH_SINHF 1
#define SD_HAVE_MATH_SQRT 1
#define SD_HAVE_MATH_SQRTF 1
#define SD_HAVE_MATH_TAN 1
#define SD_HAVE_MATH_TANF 1
#define SD_HAVE_MATH_TANH 1
#define SD_HAVE_MATH_TANHF 1
#define SD_HAVE_MATH_TGAMMA 1
#define SD_HAVE_MATH_TRUNC 1
#define SD_HAVE_MATH_TRUNCF 1
#define SD_HAVE_MATH_TRUNCL 1
#define SD_HAVE_MATH_Y0 1
#define SD_HAVE_MATH_Y0F 1
#define SD_HAVE_MATH_Y1 1
#define SD_HAVE_MATH_Y1F 1
#define SD_HAVE_MATH_YN 1
#define SD_HAVE_MATH_YNF 1

#endif")
  )

  (subsection
    (title "Creates")
    (para "The module creates the following files:")
    (list
      (item file_name "libs-math")
      (item file_name "flags-math")
      (item file_name "_sd_math.h")
    ))

  (subsection
    (title "Defines")
    (para "The module defines the following preprocessor constants:")
    (table definitions
      (t-row
        (item "Constant")
        (item "Type")
        (item "Attributes"))
      (t-row
        (item constant "SD_HAVE_MATH_ACOS ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ACOSH ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ACOSHF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ASIN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ASINF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ASINH ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ASINHF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ATAN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ATAN2 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ATAN2F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ATANF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ATANH ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ATANHF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_CBRT ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_CBRTF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_CEIL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_CEILF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_CEILL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_COPYSIGN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_COPYSIGNF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_COPYSIGNL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_COS ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_COSF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_COSH ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_COSHF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ERF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ERFC ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ERFCF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ERFF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_EXP ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_EXP2 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_EXP2F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_EXPF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_EXPM1 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_EXPM1F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FABS ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FABSL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FDIM ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FDIMF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FDIML ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FLOOR ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FLOORL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMA ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMAF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMAL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMAX ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMAXF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMAXL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMIN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMINF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FMINL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FPCLASSIFY ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FREXP ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FREXPF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_FREXPL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ILOGB ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ILOGBF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ILOGBL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISFINITE ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISGREATER ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISGREATEREQUAL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISINF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISLESS ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISLESSEQUAL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISLESSGREATER ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISNAN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISNANF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISNORMAL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ISUNORDERED ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_J0 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_J0F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_J1 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_J1F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_JN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_JNF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LDEXP ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LDEXPF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LDEXPL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LGAMMA ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LGAMMAF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LLRINT ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LLRINTF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LLROUND ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LLROUNDF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LLROUNDL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LOG ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LOG10 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LOG10F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LOG1P ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LOG1PF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LOGF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LRINT ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LRINTF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LROUND ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LROUNDF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_LROUNDL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_MODF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEARBYINT ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEARBYINTF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEXTAFTER ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEXTAFTERF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEXTAFTERL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEXTTOWARD ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEXTTOWARDF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_NEXTTOWARDL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_POW ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_POWF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_REMAINDER ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_REMAINDERF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_REMQUO ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_REMQUOF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_RINT ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_RINTF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_ROUNDL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SCALBLN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SCALBLNF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SCALBLNL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SCALBN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SCALBNF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SCALBNL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SIGNBIT ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SIN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SINF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SINH ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SINHF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SQRT ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_SQRTL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TAN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TANF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TANH ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TANHF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TGAMMA ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TRUNC ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TRUNCF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_TRUNCL ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_Y0 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_Y0F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_Y1 ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_Y1F ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_YN ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
      (t-row
        (item constant "SD_HAVE_MATH_YNF ")
        (item " integer 1 .. 1 ")
        (item constant " optional"))
    ))

  (subsection
    (title "Output")
    (para "The module writes lines with the following forms to "
      (item file_name "sysdeps.out") ":")
    (para-verbatim example (render "ud-mr-sd-math-sysdeps-bnf.txt")))
  (subsection
    (title "Module Metadata")
    (para
      (table module_metadata
        (t-row
          (item "Author Email") (item email_address "sysdeps@coreland.ath.cx"))
        (t-row
          (item "Author URL")    (item (link-ext "http://coreland.ath.cx"))))))
)
