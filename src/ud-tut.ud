(section
  (title "Tutorial")

  (subsection
    (title "First Steps")

    (para "This tutorial describes basic usage of the "
      (item package "sysdeps") " package. In this tutorial, a small
      program will be developed using the C language and the "
      (item package "sysdeps") " package will be used to provide
      feature detection at compile time.")

    (para-verbatim example
"$ mkdir new-project
$ cd new-project")

    (para "The " (item package "sysdeps") " system is self-contained and
      all necessary files are included along with the project using the
      system. This ensures that the system itself does not create any
      dependencies on external tools.")

    (para "To initialize the " (item package "sysdeps") " system, the "
      (item command "sysdeps-init") " command is provided. The command
      reads the " (item variable "SYSDEP_REPOSITORY") " environment
      variable and interprets the value of this variable as a filesystem
      path to the currently installed " (item package "sysdeps")
      " repository.")

    (para-verbatim example
"$ SYSDEP_REPOSITORY=/usr/local/share/coreland/sysdeps-repos
$ export SYSDEP_REPOSITORY

$ sysdeps-init
$ ls -alF
total 6
drwxr-xr-x  3 cpj   wheel   512 14 Oct 02:00 ./
drwxrwxrwt  8 root  wheel   512 14 Oct 02:00 ../
drwxr-xr-x  3 cpj   wheel  1024 14 Oct 02:00 SYSDEPS/

$ ls -alF SYSDEPS
total 168
drwxr-xr-x  3 cpj wheel   1024 14 Oct 02:00 ./
drwxr-xr-x  3 cpj wheel    512 14 Oct 02:00 ../
drwxr-xr-x  2 cpj wheel    512 14 Oct 02:00 modules/
-rwxr-xr-x  1 cpj wheel   1269 14 Oct 02:00 sd-adaversion*
-rw-r--r--  1 cpj wheel   2111 14 Oct 02:00 sd-arch.c
-rw-r--r--  1 cpj wheel   2894 14 Oct 02:00 sd-cctype.c
-rw-r--r--  1 cpj wheel   5918 14 Oct 02:00 sd-ccversion.c
-rwxr-xr-x  1 cpj wheel   1145 14 Oct 02:00 sd-clean*
-rwxr-xr-x  1 cpj wheel    915 14 Oct 02:00 sd-compile*
-rwxr-xr-x  1 cpj wheel    968 14 Oct 02:00 sd-configbin*
-rwxr-xr-x  1 cpj wheel    408 14 Oct 02:00 sd-configman*
-rwxr-xr-x  1 cpj wheel    931 14 Oct 02:00 sd-configpkg*
-rwxr-xr-x  1 cpj wheel    808 14 Oct 02:00 sd-cpuclinesz*
-rwxr-xr-x  1 cpj wheel   1744 14 Oct 02:00 sd-cpufeat*
-rwxr-xr-x  1 cpj wheel   1363 14 Oct 02:00 sd-cpufreq*
-rwxr-xr-x  1 cpj wheel   1906 14 Oct 02:00 sd-cpuhasfeat*
-rw-r--r--  1 cpj wheel  19421 14 Oct 02:00 sd-cpuidx86.c
-rwxr-xr-x  1 cpj wheel    532 14 Oct 02:00 sd-cpul1dcache*
-rwxr-xr-x  1 cpj wheel    532 14 Oct 02:00 sd-cpul1icache*
-rwxr-xr-x  1 cpj wheel    533 14 Oct 02:00 sd-cpul2cache*
-rwxr-xr-x  1 cpj wheel    533 14 Oct 02:00 sd-cpul3cache*
-rwxr-xr-x  1 cpj wheel   1021 14 Oct 02:00 sd-cpumodel*
-rwxr-xr-x  1 cpj wheel   1485 14 Oct 02:00 sd-cpunum*
-rwxr-xr-x  1 cpj wheel    130 14 Oct 02:00 sd-creates*
-rwxr-xr-x  1 cpj wheel    789 14 Oct 02:00 sd-defines*
-rwxr-xr-x  1 cpj wheel   2274 14 Oct 02:00 sd-file*
-rwxr-xr-x  1 cpj wheel   2545 14 Oct 02:00 sd-genmk*
-rwxr-xr-x  1 cpj wheel    199 14 Oct 02:00 sd-line*
-rw-r--r--  1 cpj wheel   4813 14 Oct 02:00 sd-locker.c
-rw-r--r--  1 cpj wheel   2999 14 Oct 02:00 sd-locker_posix.c
-rw-r--r--  1 cpj wheel   6933 14 Oct 02:00 sd-locker_win32.c
-rwxr-xr-x  1 cpj wheel    995 14 Oct 02:00 sd-mk-cpuidx86-h*
-rw-r--r--  1 cpj wheel   2507 14 Oct 02:00 sd-os.c
-rwxr-xr-x  1 cpj wheel    912 14 Oct 02:00 sd-osversion*
-rwxr-xr-x  1 cpj wheel    609 14 Oct 02:00 sd-run*
-rw-r--r--  1 cpj wheel   6117 14 Oct 02:00 sd-sysinfo.h
-rw-r--r--  1 cpj wheel   1658 14 Oct 02:00 sysdep-boot
-rw-r--r--  1 cpj wheel   7015 14 Oct 02:00 sysdep-compilers
-rw-r--r--  1 cpj wheel    574 14 Oct 02:00 sysdep-mod-clean
-rw-r--r--  1 cpj wheel   8992 14 Oct 02:00 sysdep-mod-exec
-rwxr-xr-x  1 cpj wheel   2162 14 Oct 02:00 sysdep-subs*
-rw-r--r--  1 cpj wheel  17456 14 Oct 02:00 sysdep-system
-rw-r--r--  1 cpj wheel   3786 14 Oct 02:00 ver_gnat.adb")

  (para "Note that the contents of this directory are mostly internal to "
    (item package "sysdeps") ". Only a few of the programs provide services
    directly.")

  (para-verbatim example
"$ cat > main.c <<EOF
> #include <stdio.h>
>
> inline void
> hello (void)
> {
>   printf (\"hello\\n\");
> }
>
> int
> main (void)
> {
>   hello ();
>   return 0;
> }
> EOF")

  (para "The above program might compile and run perfectly well on a given
    system:")

  (para-verbatim example
"$ cc -o main main.c
$ ./main
hello")

  (para "When moved to a system with a less capable compiler, however:")

  (para-verbatim example
"$ cc -o main main.c
main.c:3: syntax: unknown identifier `inline'")

  (para "The " (item package "sysdeps") " package can be used to make this
    code portable. In this particular case, the " (link "ud_mr_sd-inline" "sd-inline")
    " module is required. The " (item command "sysdeps-list") " command can
    be combined with standard tools to provide a basic module search facility:")

  (para-verbatim example
"$ sysdeps-list | grep inline
sd-inline: Check for presence of 'inline' keyword in C compiler.")

  (para "The module is added with the " (item command "sysdeps-add") " command:")

  (para-verbatim example
"$ sysdeps-add sd-inline")

  (para "The module is copied from the repository into the "
    (item file_name "modules") " directory:")

  (para-verbatim example
"$ ls -alF SYSDEPS/modules
total 6
drwxr-xr-x  3 cpj wheel   512 14 Oct 02:28 ./
drwxr-xr-x  3 cpj wheel  1024 14 Oct 02:00 ../
drwxr-xr-x  2 cpj wheel   512 14 Oct 02:28 sd-inline/")

  (para "The module itself is executed by calling the " (item command "sd-run")
    " command in the " (item file_name "SYSDEPS") " directory. The "
    (item package "sysdeps") " package requires some minor configuration
    in order to work, however. At a minimum, it needs to be told which
    compiler executables to use. In order to prevent entire classes of bugs
    that occur from build systems reading the environment "
      (footnote (item "Anybody involved in the building of large sets of
        packages for operating system distributions or with cross compilation
        will be aware of the silent horrors of errant environment variables and
        unexpected and impossible-to-locate \"build poisoning\"."))
    ", the " (item package "sysdeps") " package requires the use of trivial
    configuration files:")

  (para-verbatim example
"$ echo 'cc' > conf-cc
$ echo 'cc' > conf-ld")

  (para "The module can now be executed:")

  (para-verbatim example
"$ (cd SYSDEPS && ./sd-run modules/sd-inline)")

  (para "Execution of the module will have created a couple of new
    files:")

  (para-verbatim example
"total 16
drwxr-xr-x  3 cpj   wheel   512 14 Oct 02:42 ./
drwxrwxrwt  8 root  wheel   512 14 Oct 02:30 ../
drwxr-xr-x  3 cpj   wheel  1536 14 Oct 02:42 SYSDEPS/
-rw-r--r--  1 cpj   wheel    74 14 Oct 02:42 _sd_inline.h
-rw-r--r--  1 cpj   wheel     3 14 Oct 02:42 conf-cc
-rw-r--r--  1 cpj   wheel     3 14 Oct 02:42 conf-ld
-rw-r--r--  1 cpj   wheel   116 14 Oct 02:08 main.c
-rw-r--r--  1 cpj   wheel    15 14 Oct 02:42 sysdeps.out")

  (para "The " (item file_name "_sd_inline.h") " is the header file
    generated by the module. This header contains the definitions based
    on the values that the module was able to detect. In this case, the
    header file looks like this:")

  (para-verbatim example
"#ifndef _SD_INLINE_H
#define _SD_INLINE_H
#define SD_HAVE_INLINE 1
#endif")

  (para "The " (item file_name "main.c") " program can now be modified
    to use this header and can create an appropriate definition if it
    turns out that the " (item constant "inline") " keyword is not
    supported on the current platform:")

  (para-verbatim example
"#include <stdio.h>

#include \"_sd_inline.h\"

/* Create empty macro if current platform does not support 'inline' */
#ifndef SD_HAVE_INLINE
#  define inline
#endif

inline void
hello (void)
{
  printf (\"hello\\n\");
}

int
main (void)
{
  hello ();
  return 0;
}")

  (para "The other file generated, named " (item file_name "sysdeps.out")
    " contains the results of module executions. Each module appends one or
    more lines to this file in a strictly specified and easily parseable
    format. The contents of the file after the above module execution:")

  (para-verbatim example
"sd-inline: yes")

  (para "The " (item package "sysdeps") " package is self-cleaning. The
    module will execute its own cleanup routine when called with the "
    (item command "sd-clean") " command:")

  (para-verbatim example
"$ (cd SYSDEPS && ./sd-clean modules/sd-inline)
$ ls -alF
total 12
drwxr-xr-x  3 cpj   wheel   512 14 Oct 02:52 ./
drwxrwxrwt  8 root  wheel   512 14 Oct 02:46 ../
drwxr-xr-x  3 cpj   wheel  1536 14 Oct 02:52 SYSDEPS/
-rw-r--r--  1 cpj   wheel     3 14 Oct 02:42 conf-cc
-rw-r--r--  1 cpj   wheel     3 14 Oct 02:42 conf-ld
-rw-r--r--  1 cpj   wheel   260 14 Oct 02:48 main.c")

  (para "The " (item package "sysdeps") " package is really intended to
    be called from " (item command "make") " files. The following is an
    example of how one might be written for the current project:")

  (para-verbatim example
"CC=`head -n 1 conf-cc`
LD=`head -n 1 conf-ld`

all: main

main: main.o
	$(LD) -o main main.o
main.o: main.c _sd_inline.h
	$(CC) -c -o main.o main.c
_sd_inline.h:
	(cd SYSDEPS && ./sd-run modules/sd-inline)

sysdeps-clean:
	(cd SYSDEPS && ./sd-clean modules/sd-inline)
clean: sysdeps-clean
	rm -f main main.o")

  (para-verbatim example
"$ make
(cd SYSDEPS && ./sd-run modules/sd-inline)
`head -n 1 conf-cc` -c -o main.o main.c
`head -n 1 conf-ld` -o main main.o
$ make clean
(cd SYSDEPS && ./sd-clean modules/sd-inline)
rm -f main main.o")

  (para "The " (item package "sysdeps") " package is entirely safe to
    run with parallel " (item command "make") " builds."))

)
